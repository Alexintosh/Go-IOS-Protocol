// Code generated by MockGen. DO NOT EDIT.
// Source: statepool.go

// Package iosbase_mock is a generated GoMock package.
package iosbase_mock

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/iost-official/PrototypeWorks/iosbase"
	reflect "reflect"
)

// MockStatePool is a mock of StatePool interface
type MockStatePool struct {
	ctrl     *gomock.Controller
	recorder *MockStatePoolMockRecorder
}

// MockStatePoolMockRecorder is the mock recorder for MockStatePool
type MockStatePoolMockRecorder struct {
	mock *MockStatePool
}

// NewMockStatePool creates a new mock instance
func NewMockStatePool(ctrl *gomock.Controller) *MockStatePool {
	mock := &MockStatePool{ctrl: ctrl}
	mock.recorder = &MockStatePoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatePool) EXPECT() *MockStatePoolMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockStatePool) Add(utxo State) error {
	ret := m.ctrl.Call(m, "Add", utxo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockStatePoolMockRecorder) Add(utxo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStatePool)(nil).Add), utxo)
}

// Find mocks base method
func (m *MockStatePool) Find(StateHash []byte) (State, error) {
	ret := m.ctrl.Call(m, "Find", StateHash)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockStatePoolMockRecorder) Find(StateHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStatePool)(nil).Find), StateHash)
}

// GetSlice mocks base method
func (m *MockStatePool) GetSlice() ([]State, error) {
	ret := m.ctrl.Call(m, "GetSlice")
	ret0, _ := ret[0].([]State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlice indicates an expected call of GetSlice
func (mr *MockStatePoolMockRecorder) GetSlice() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlice", reflect.TypeOf((*MockStatePool)(nil).GetSlice))
}

// Del mocks base method
func (m *MockStatePool) Del(StateHash []byte) error {
	ret := m.ctrl.Call(m, "Del", StateHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockStatePoolMockRecorder) Del(StateHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockStatePool)(nil).Del), StateHash)
}
