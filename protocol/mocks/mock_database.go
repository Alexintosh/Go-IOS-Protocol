// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/PrototypeWorks/protocol (interfaces: Database)

// Package protocol_mock is a generated GoMock package.
package protocol_mock

import (
	gomock "github.com/golang/mock/gomock"
	iosbase "github.com/iost-official/PrototypeWorks/iosbase"
	protocol "github.com/iost-official/PrototypeWorks/protocol"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetBlockChain mocks base method
func (m *MockDatabase) GetBlockChain() (iosbase.BlockChain, error) {
	ret := m.ctrl.Call(m, "GetBlockChain")
	ret0, _ := ret[0].(iosbase.BlockChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockChain indicates an expected call of GetBlockChain
func (mr *MockDatabaseMockRecorder) GetBlockChain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockChain", reflect.TypeOf((*MockDatabase)(nil).GetBlockChain))
}

// GetCurrentView mocks base method
func (m *MockDatabase) GetCurrentView() (protocol.View, error) {
	ret := m.ctrl.Call(m, "GetCurrentView")
	ret0, _ := ret[0].(protocol.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentView indicates an expected call of GetCurrentView
func (mr *MockDatabaseMockRecorder) GetCurrentView() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentView", reflect.TypeOf((*MockDatabase)(nil).GetCurrentView))
}

// GetStatePool mocks base method
func (m *MockDatabase) GetStatePool() (iosbase.StatePool, error) {
	ret := m.ctrl.Call(m, "GetStatePool")
	ret0, _ := ret[0].(iosbase.StatePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatePool indicates an expected call of GetStatePool
func (mr *MockDatabaseMockRecorder) GetStatePool() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatePool", reflect.TypeOf((*MockDatabase)(nil).GetStatePool))
}

// NewViewSignal mocks base method
func (m *MockDatabase) NewViewSignal() (chan protocol.View, error) {
	ret := m.ctrl.Call(m, "NewViewSignal")
	ret0, _ := ret[0].(chan protocol.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewViewSignal indicates an expected call of NewViewSignal
func (mr *MockDatabaseMockRecorder) NewViewSignal() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewViewSignal", reflect.TypeOf((*MockDatabase)(nil).NewViewSignal))
}

// PushBlock mocks base method
func (m *MockDatabase) PushBlock(arg0 *iosbase.Block) error {
	ret := m.ctrl.Call(m, "PushBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushBlock indicates an expected call of PushBlock
func (mr *MockDatabaseMockRecorder) PushBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushBlock", reflect.TypeOf((*MockDatabase)(nil).PushBlock), arg0)
}

// VerifyBlock mocks base method
func (m *MockDatabase) VerifyBlock(arg0 *iosbase.Block) error {
	ret := m.ctrl.Call(m, "VerifyBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyBlock indicates an expected call of VerifyBlock
func (mr *MockDatabaseMockRecorder) VerifyBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBlock", reflect.TypeOf((*MockDatabase)(nil).VerifyBlock), arg0)
}

// VerifyBlockWithCache mocks base method
func (m *MockDatabase) VerifyBlockWithCache(arg0 *iosbase.Block, arg1 iosbase.TxPool) error {
	ret := m.ctrl.Call(m, "VerifyBlockWithCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyBlockWithCache indicates an expected call of VerifyBlockWithCache
func (mr *MockDatabaseMockRecorder) VerifyBlockWithCache(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBlockWithCache", reflect.TypeOf((*MockDatabase)(nil).VerifyBlockWithCache), arg0, arg1)
}

// VerifyTx mocks base method
func (m *MockDatabase) VerifyTx(arg0 iosbase.Tx) error {
	ret := m.ctrl.Call(m, "VerifyTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTx indicates an expected call of VerifyTx
func (mr *MockDatabaseMockRecorder) VerifyTx(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTx", reflect.TypeOf((*MockDatabase)(nil).VerifyTx), arg0)
}

// VerifyTxWithCache mocks base method
func (m *MockDatabase) VerifyTxWithCache(arg0 iosbase.Tx, arg1 iosbase.TxPool) error {
	ret := m.ctrl.Call(m, "VerifyTxWithCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTxWithCache indicates an expected call of VerifyTxWithCache
func (mr *MockDatabaseMockRecorder) VerifyTxWithCache(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTxWithCache", reflect.TypeOf((*MockDatabase)(nil).VerifyTxWithCache), arg0, arg1)
}
