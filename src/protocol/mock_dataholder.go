// Code generated by MockGen. DO NOT EDIT.
// Source: dataholder.go

// Package protocol is a generated GoMock package.
package protocol

import (
	iosbase "IOS/src/iosbase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataHolder is a mock of DataHolder interface
type MockDataHolder struct {
	ctrl     *gomock.Controller
	recorder *MockDataHolderMockRecorder
}

// MockDataHolderMockRecorder is the mock recorder for MockDataHolder
type MockDataHolderMockRecorder struct {
	mock *MockDataHolder
}

// NewMockDataHolder creates a new mock instance
func NewMockDataHolder(ctrl *gomock.Controller) *MockDataHolder {
	mock := &MockDataHolder{ctrl: ctrl}
	mock.recorder = &MockDataHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataHolder) EXPECT() *MockDataHolderMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockDataHolder) Init(rd *RuntimeData, network *NetworkFilter) error {
	ret := m.ctrl.Call(m, "Init", rd, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockDataHolderMockRecorder) Init(rd, network interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDataHolder)(nil).Init), rd, network)
}

// OnNewBlock mocks base method
func (m *MockDataHolder) OnNewBlock(block *iosbase.Block) {
	m.ctrl.Call(m, "OnNewBlock", block)
}

// OnNewBlock indicates an expected call of OnNewBlock
func (mr *MockDataHolderMockRecorder) OnNewBlock(block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewBlock", reflect.TypeOf((*MockDataHolder)(nil).OnNewBlock), block)
}
