// Code generated by MockGen. DO NOT EDIT.
// Source: recorder.go

// Package protocol is a generated GoMock package.
package protocol

import (
	iosbase "IOS/src/iosbase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRecorder is a mock of Recorder interface
type MockRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockRecorderMockRecorder
}

// MockRecorderMockRecorder is the mock recorder for MockRecorder
type MockRecorderMockRecorder struct {
	mock *MockRecorder
}

// NewMockRecorder creates a new mock instance
func NewMockRecorder(ctrl *gomock.Controller) *MockRecorder {
	mock := &MockRecorder{ctrl: ctrl}
	mock.recorder = &MockRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecorder) EXPECT() *MockRecorderMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockRecorder) Init(rd *RuntimeData, nw *NetworkFilter) error {
	ret := m.ctrl.Call(m, "Init", rd, nw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockRecorderMockRecorder) Init(rd, nw interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRecorder)(nil).Init), rd, nw)
}

// PublishTx mocks base method
func (m *MockRecorder) PublishTx(tx iosbase.Tx) error {
	ret := m.ctrl.Call(m, "PublishTx", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTx indicates an expected call of PublishTx
func (mr *MockRecorderMockRecorder) PublishTx(tx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTx", reflect.TypeOf((*MockRecorder)(nil).PublishTx), tx)
}

// RecorderLoop mocks base method
func (m *MockRecorder) RecorderLoop() {
	m.ctrl.Call(m, "RecorderLoop")
}

// RecorderLoop indicates an expected call of RecorderLoop
func (mr *MockRecorderMockRecorder) RecorderLoop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecorderLoop", reflect.TypeOf((*MockRecorder)(nil).RecorderLoop))
}

// SendTxPack mocks base method
func (m *MockRecorder) SendTxPack(member iosbase.Member) error {
	ret := m.ctrl.Call(m, "SendTxPack", member)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTxPack indicates an expected call of SendTxPack
func (mr *MockRecorderMockRecorder) SendTxPack(member interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTxPack", reflect.TypeOf((*MockRecorder)(nil).SendTxPack), member)
}
