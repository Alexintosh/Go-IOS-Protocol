// Code generated by MockGen. DO NOT EDIT.
// Source: view.go

// Package protocol is a generated GoMock package.
package protocol

import (
	iosbase "IOS/src/iosbase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockView is a mock of View interface
type MockView struct {
	ctrl     *gomock.Controller
	recorder *MockViewMockRecorder
}

// MockViewMockRecorder is the mock recorder for MockView
type MockViewMockRecorder struct {
	mock *MockView
}

// NewMockView creates a new mock instance
func NewMockView(ctrl *gomock.Controller) *MockView {
	mock := &MockView{ctrl: ctrl}
	mock.recorder = &MockViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockView) EXPECT() *MockViewMockRecorder {
	return m.recorder
}

// GetPrimary mocks base method
func (m *MockView) GetPrimary() iosbase.Member {
	ret := m.ctrl.Call(m, "GetPrimary")
	ret0, _ := ret[0].(iosbase.Member)
	return ret0
}

// GetPrimary indicates an expected call of GetPrimary
func (mr *MockViewMockRecorder) GetPrimary() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimary", reflect.TypeOf((*MockView)(nil).GetPrimary))
}

// GetBackup mocks base method
func (m *MockView) GetBackup() []iosbase.Member {
	ret := m.ctrl.Call(m, "GetBackup")
	ret0, _ := ret[0].([]iosbase.Member)
	return ret0
}

// GetBackup indicates an expected call of GetBackup
func (mr *MockViewMockRecorder) GetBackup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackup", reflect.TypeOf((*MockView)(nil).GetBackup))
}

// isPrimary mocks base method
func (m *MockView) isPrimary(ID string) bool {
	ret := m.ctrl.Call(m, "isPrimary", ID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isPrimary indicates an expected call of isPrimary
func (mr *MockViewMockRecorder) isPrimary(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPrimary", reflect.TypeOf((*MockView)(nil).isPrimary), ID)
}

// isBackup mocks base method
func (m *MockView) isBackup(ID string) bool {
	ret := m.ctrl.Call(m, "isBackup", ID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isBackup indicates an expected call of isBackup
func (mr *MockViewMockRecorder) isBackup(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isBackup", reflect.TypeOf((*MockView)(nil).isBackup), ID)
}

// CommitteeSize mocks base method
func (m *MockView) CommitteeSize() int {
	ret := m.ctrl.Call(m, "CommitteeSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// CommitteeSize indicates an expected call of CommitteeSize
func (mr *MockViewMockRecorder) CommitteeSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitteeSize", reflect.TypeOf((*MockView)(nil).CommitteeSize))
}

// ByzantineTolerance mocks base method
func (m *MockView) ByzantineTolerance() int {
	ret := m.ctrl.Call(m, "ByzantineTolerance")
	ret0, _ := ret[0].(int)
	return ret0
}

// ByzantineTolerance indicates an expected call of ByzantineTolerance
func (mr *MockViewMockRecorder) ByzantineTolerance() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByzantineTolerance", reflect.TypeOf((*MockView)(nil).ByzantineTolerance))
}
