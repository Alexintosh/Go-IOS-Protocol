// Code generated by MockGen. DO NOT EDIT.
// Source: replica.go

// Package protocol is a generated GoMock package.
package protocol

import (
	iosbase "IOS/src/iosbase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReplica is a mock of Replica interface
type MockReplica struct {
	ctrl     *gomock.Controller
	recorder *MockReplicaMockRecorder
}

// MockReplicaMockRecorder is the mock recorder for MockReplica
type MockReplicaMockRecorder struct {
	mock *MockReplica
}

// NewMockReplica creates a new mock instance
func NewMockReplica(ctrl *gomock.Controller) *MockReplica {
	mock := &MockReplica{ctrl: ctrl}
	mock.recorder = &MockReplicaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplica) EXPECT() *MockReplicaMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockReplica) Init(rd *RuntimeData, network *NetworkFilter) error {
	ret := m.ctrl.Call(m, "Init", rd, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockReplicaMockRecorder) Init(rd, network interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockReplica)(nil).Init), rd, network)
}

// ReplicaLoop mocks base method
func (m *MockReplica) ReplicaLoop() {
	m.ctrl.Call(m, "ReplicaLoop")
}

// ReplicaLoop indicates an expected call of ReplicaLoop
func (mr *MockReplicaMockRecorder) ReplicaLoop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaLoop", reflect.TypeOf((*MockReplica)(nil).ReplicaLoop))
}

// OnRequest mocks base method
func (m *MockReplica) OnRequest(request iosbase.Request) {
	m.ctrl.Call(m, "OnRequest", request)
}

// OnRequest indicates an expected call of OnRequest
func (mr *MockReplicaMockRecorder) OnRequest(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRequest", reflect.TypeOf((*MockReplica)(nil).OnRequest), request)
}

// OnTxPack mocks base method
func (m *MockReplica) OnTxPack(pool iosbase.TxPool) error {
	ret := m.ctrl.Call(m, "OnTxPack", pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTxPack indicates an expected call of OnTxPack
func (mr *MockReplicaMockRecorder) OnTxPack(pool interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTxPack", reflect.TypeOf((*MockReplica)(nil).OnTxPack), pool)
}
